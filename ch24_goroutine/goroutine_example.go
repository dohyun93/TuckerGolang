package ch24_goroutine

import (
	"fmt"
)

func GoRoutine() {
	// 스레드는 실행 흐름이다.

	// 프로세스는 메모리에 로딩되어 동작하는 프로그램이다.
	// 한 번에 한 프로세스만 동작시키는 걸 '싱글태스킹', 여러 프로세스들을 동시에 동작시키는 걸 '멀티태스킹'이라고 한다.
	// "스레드는 프로세스 안의 세부 작업 단위"이다.

	// 프로세스 한 개가 하나의 스레드를 갖고있으면 싱글 스레드 프로세스, 두 개 이상의 스레드를 갖고있으면 멀티 스레드 프로세스라고 한다.
	// CPU 에 코어가 하나가 있다면 한 번에 하나의 스레드를 수행할 수 있다. -> 이 경우 각 스레드가 CPU를 순차적으로 점유하며 수행된다.
	// CPU에 코어가 여러개 있다면 동시에 그 개수만큼 스레드를 수행할 수 있다.

	// 싱글 코어에 스레드가 여러개인 상황을 가정하면, 스레드가 전환될 때 '스레드 컨텍스트'를 저장하고 '컨텍스트 스위칭'이 일어난다.
	// '스레드 컨텍스트' : 실행중이던 스레드의 스택 메모리, 명령포인터 등의 정보를 저장. 다시 실행 시 참고하기 위한 정보들임.
	// '컨텍스트 스위칭' : 다른 스레드로 전환

	// Go 언어에서는 'CPU 코어마다' 'OS 스레드를 하나만 할당'해서 사용하기 때문에 컨텍스트 스위칭 비용이 발생하지 않는다!!

	// =========================================================================================================
	// 1. 프로세스는 메모리에 올라간 실행중인 프로그램을 의미한다.
	// 2. 프로세스 내에는 실행 흐름인 '스레드'가 한 개 이상 존재한다.
	// 3. CPU 내 코어가 이 스레드를 수행하는데, 한 번에 하나의 스레드만 처리할 수 있다.
	// 4. 스레드 변경이 일어날 경우, 해당 스레드의 '스레드 컨텍스트(명령 포인터/스택 메모리)'를 저장하고, 다른 스레드의 스레드 컨텍스트를
	//    복원하는 '컨텍스트 스위칭'이 발생하며, 적정 개수를 넘어 한 번에 너무 많은 스레드를 수행하게 되면 성능이 저하된다.
	//    Go 언어는 CPU 코어마다 OS 스레드를 하나만 할당해서 사용하기 때문에, 컨텍스트 스위칭 비용이 발생하지 않는다.
	// =========================================================================================================
	fmt.Println()

}
