package ch14_pointer

import (
	"fmt"
)

func PointerExample() {
	// 포인터란?
	// 포인터는 메모리의 주소를 값으로 갖는 타입이다.

	// 변수 A가 있다.
	// 이 변수 A의 속성값으로 A변수의 메모리 주소값이 있다.
	// 이 메모리 주소값도 숫자이기 때문에, 어떤 변수의 값이 될 수 있다.
	// 이 때 이런 주소값을 값으로 갖는 변수를 포인터 변수라고 한다.

	var a int = 10
	var b *int = &a

	fmt.Println("변수 a의 값(a): ", a)     // 10
	fmt.Println("변수 a의 주소값(&a): ", &a) // 0xc000018098

	fmt.Println("포인터변수 b에 담긴 값(b): ", b)     // 0xc000018098
	fmt.Println("포인터변수 b가 가리키는 값(*b): ", *b) // 10
	fmt.Println("포인터변수 b의 주소값(&b): ", &b)    // 0xc000006028

	*b = 20 // b가 가리키는 메모리공간 a의 변수값을 20으로 바꾸니, a의 값과 b가 가리키는 주소의값이 20으로 바뀌는 것은 당연.
	fmt.Println(a, *b)

	// nil
	// 포인터의 기본값은 nil이다.
	// 이는 이 포인터 변수에 담긴 주소값이 없다는 의미로, 즉, 가리키는 주소값이 없음을 의미한다.

	// 상황을 가정해보자.
	// 어떤 구조체가 있는데, 그 구조체의 포인터를 넘기지 않고 값을 넘기어 필드값을 변경시킨다면
	// call-by-value이기 때문에 인자로 넘긴 변수의 필드값이 바뀌지 않는다.
	// 또한 구조체 전체를 넘기기 때문에 불필요한 메모리 낭비가 발생한다.

	// 만약 구조체변수의 주소를 포인터변수를 인자로하는 call-by-reference를 한다면
	// 메모리 낭비도 막을뿐더러 실질적으로 원하는 값 변경이 가능하다.

	// 1. Data 구조체를 생성해 포인터 변수 초기화하기
	// var data Data
	// var p *Data = &data

	// 위 두 줄을 아래 한 줄로 할 수 있다.
	//var p *Data = &Data{}

	// 2. 인스턴스
	// 인스턴스란 메모리에 할당된 데이터의 실체를 말한다.
	// var data Data
	// Data타입값을 저장할 수 있는 메모리공간을 data라는 이름에 할당한다.
	// 이렇게 할당된 메모리 공간의 실체를 인스턴스라고 부른다.

	//var p1 *Data = &Data{}
	//var p2 *Data = p1
	// var p3 *Data = p2
	// 이 경우 Data 인스턴스 하나를 만들고, 포인터변수 p1, p2, p3가 가리킨다.

	//var data1 Data
	//var data2 Data = data1
	//var data3 Data = data2
	// 이 경우 Data 인스턴스 세 개를 만들고, 구조체의 값의 복사만 이루어졌다.

	// "인스턴스는 데이터의 실체다."
	// "인스턴스는 메모리에 존재하는 데이터의 실체다."
	// "구조체 포인터(*)를 함수 매개변수로 사용한다는 말은 결국 구조체 인스턴스(&, 주소값)를 입력받겠다는 의미"

	// 3. new() 내장함수
	// p := &Data{} 처럼 했지만, 내장함수 new를 사용해도 가능하다. (&Data{} 는 구조체의 인스턴스. p는 구조체 포인터.)
	// p1 := new(Data) // 사용자 초기화가 불가.
	// p2 := &Data{value: 10, data: [10]int{1, 2, 3}} // 이 방식은 가능.

	// 인스턴스는 언제 사라질까?
	// Go언어는 GC가 있어서 일정 간격으로 메모리에서 불필요 데이터들을 청소한다.
	// 만약 어떤 함수 내에서 구조체 또는 일반타입의 포인터 변수가 선언되어 인스턴스가 만들어졌다고 하자.
	// 그 인스턴스로 로직처리 후 함수가 종료될 때, 그 인스턴스는 더이상 쓰이지 않는다.
	// 이 때 GC가 해당 인스턴스를 메모리에서 쓸모없어졌기 때문에 청소한다.

	// 14장 포인터 정리
	// 1. 인스턴스는 메모리에 생성된 데이터의 실체다.
	// 2. 포인터를 이용해서 인스턴스를 가리키게 할 수 있다.
	// 3. 함수 호출 시 포인터 인수(*)를 통해서 인스턴스(&)를 입력받고, 그 값을 변경할 수 있게 된다.
	// 4. Go에서 쓸모없어진 인스턴스는 가비지 컬렉터가 자동으로 지워준다.
}

type Data struct {
	value int
	data  [10]int
}
