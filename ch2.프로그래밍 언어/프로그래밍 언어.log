* 프로그래밍 언어 변천사
프로그래밍 언어는 기계에게 내릴 명령을 표현하는데 사용된다.

과거 천공카드로 구멍을 뚫어 동작시키던 컴퓨터는 이 천공카드가 일종의 프로그래밍 언어였다.
0과 1로 인식되는 이 카드는 오늘날 기계어라고 할 수 있다.

시간이 흘러 어셈블리어가 등장해 ADD 2 3 과 같은 코딩이 가능해졌다.
하지만 어셈블리어는 고급 프로그래밍언어에 비해 코드양이 많아 생산성이 떨어지고 가독성이 떨어지는 문제가 있다.

오늘날 Go, C++, Python과 같은 고급 프로그래밍 언어들이 등장하면서, 이러한 문제점들이 많이 개선이 되었다.

* 컴파일러
컴파일러란, 고급 언어로 되어있는 코드를 기계어로 번역해주는 도구다.
정적 컴파일과 동적 컴파일로 나눌 수 있다.

* 정적 컴파일/동적 컴파일
1. 정적 컴파일은 프로그램 실행 전에 미리 컴파일을 하여 실행 파일을 만드는 것이다.
그래서 실행할 때마다 컴파일을 하지 않더라도 빠른 실행이 가능하다.

하지만, 32비트/64비트같은 CPU 아키텍처나 ARM 계열인지 인텔계열인지 같은 운영체제에 따라 다르게 컴파일 되어야 한다는점에 있어서는
범용성은 떨어진다고 할 수 있다.

2. 동적 컴파일은 프로그램을 실행할 때마다 컴파일을 하여 실행시키는 컴파일 방식이다.
실행할 때마다 컴파일을 해서 실행 속도는 다소 정적 컴파일 방식보다 늦지만,
CPU 아키텍쳐나 운영체제에 종속받지 않고, 실행환경에 맞는 기계어로 컴파일이 되기 때문에 범용성이 더욱 우수하다.

Go는 정적 컴파일 방식의 언어이다.
Go 내부 환경 변수를 바꿔서 다양한 플랫폼에 맞게 컴파일할 수 있다. (3.3절 참고)

* 약타입 언어 / 강타입 언어
타입 검사를 강하게 하느냐, 약하게 하느냐에 따라 나눌 수 있다.
타입 검사를 강하게 하는 언어는 강 타입 언어 혹은 정적 타입 언어라고 부르는데, Go는 강 타입 언어다.

예를 들어서 서로 다른 타입 간 연산을 할 경우, 이에 대해 엄격하게 타입체크를 한다면, 강 타입 언어이다.

약 타입 언어는 규칙이 관대해서 더 편하게 코딩할 수 있는 장점이 있지만, 예상치 못한 버그를 발생시킬 수 있다.
강 타입 언어는 사용하기 까다롭지만, 타입 검사를 언어 자체에서 해주기 때문에 타입으로 생길 수 있는 문제를 미연에 방지할 수 있다.

GO는 자동 타입 변환까지도 지원하지 않는 최'강' 타입 언어이다.
그래서 사용하기 좀 까다롭지만, 타입으로인한 버그 발생 확률이 매우 낮다.

* 가비지컬렉터 유무
가비지 컬렉터란 메모리에서 불필요한 영역을 제거해주는 기능으로, 메모리 할당과 해제에 대해서 역할을 수행한다.
가비지 컬렉터가 있으면 메모리 해제를 자동으로 해주기 때문에 메모리 관련 문제가 줄어들지만, 메모리 청소에 CPU 성능을 사용한다는 단점이 있다.
그래서 보통 가비지 컬렉터가 있는 언어는 CPU성능의 일부를 가비지 컬렉터가 사용하기 때문에, 좀 더 느린 성능을 보인다.

Go 언어는 가비지 컬렉터를 제공하여 개발자가 메모리를 일일이 지우지 않아도 된다. 추가로, Go의 가비지 컬렉터는 매우 발전된 형태로 CPU 성능손실이
크지 않다. Go는 가비지 컬렉터가 있는 언어들 가운데 상위 성능을 자랑한다.

#* 정리 *#
1. Go 언어는 정적 컴파일 언어다. 실행 전 한번의 컴파일로 이후 실행들을 컴파일없이 빠른 실행이 가능하다.
2. Go 언어는 최강 타입 언어다. 자동 타입 변환 지원하지 않으며, 타입 검사를 강하게 해서 다소 사용하기 까다롭지만, 예상치못한 버그발생확률을
   현저하게 낮춰준다.
3. Go언어는 가비지 컬렉터를 제공한다. 개발자가 메모리 할당/해제에 크게 신경을 쓰지 않아도 알아서 메모리 누수발생을 시키지 않도록 가비지 컬렉터가
   동작하지만, CPU의 성능저하도 크지 않아 가비지 컬렉터를 제공하는 언어들 가운데 상위 성능을 보인다.
4. 고급 프로그래밍 언어는 코드 이식성이 높고, 더 편리하게 프로그래밍을 할 수 있어서 생산성이 더욱 높다.
5. 저수준인 어셈블리어는 0과 1인 기계어로 1:1 대응된다.
