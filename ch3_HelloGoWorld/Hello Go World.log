1. Go 역사
Go 언어는 2009년 발표된 오픈 소스 프로그래밍 언어이다.
홈페이지 주소: golang.org

2007년에 개발을 시작해 2009년 11월 10일 세상에 공개되었다.
온라인 Go 언어 컴파일러 play.golang.org에서 체험해볼 수 있다.

오픈소스 허브인 깃허브에 올라간 소스코드 중 가장 많이 사용되는 언어 4위에 랭크될 만큼 많이 사용되고 있으며,
매년 순위가 상승중이다.

2. Go 언어 특징
2-1. 클래스가 없지만 메서드를 갖는 구조체를 지원한다.
2-2. 상속이 없으며, 구조체가 메서드를 가질 수 있다.
2-3. 인터페이스가 존재한다.
2-4. 익명함수 (함수 리터럴)가 존재한다.
2-5. 고성능 가비지컬렉터를 지원한다.
2-6. 메모리 주소를 가리키는 포인터가 있다.
2-7. 제네릭 프로그래밍을 지원하지 않는다.
     -> 제네릭 프로그래밍(영어: generic programming)은 데이터 형식에 의존하지 않고,
        하나의 값이 여러 다른 데이터 타입들을 가질 수 있는 기술에 중점을 두어 재사용성을 높일 수 있는 프로그래밍 방식이다.
     -> 220403 추가: 예시로 자바에서 템플릿을 활용해 같은 형태의 다른 데이터타입을 받아 처리하는 로직같은 것을 제네릭 프로그래밍이라고하고,
     Go언어는 이런 기능이 없다.
2-8. 네임스페이스가 없다. '모든 코드는 패키지단위'로 분리된다.


3. Go 코드가 실행되기 까지
3-1. src 내 go 파일 생성/작성
3-2. go모듈 생성
3-3. 빌드/실행

만약 hello/world/golang 이라는 디렉터리 구조일 때,
world에 있는 go파일들은 world라는 패키지에 속하게 되고, golang에 있는 go파일들은 golang이라는 패키지에 속한다.
즉, go 파일들은 그 파일이 있는 폴더의 이름의 패키지에 속하며, 그 패키지 단위로 구별된다!!

go 모듈 생성은 'go mod init 모듈이름'으로 할 수 있으며, 이를 통해 go.mod 파일이 생성된다.
go.mod 파일에는 모듈명과 go 버전, 필요한 패키지 목록들이 적혀있다.

빌드는 go build로 할 수 있으며, go 코드를 기계어로 컴파일하여 실행 파일을 만들어 주는 명령어다.
GOOS와 GOARCH 환경변수 옵션을 주어서 다른 운영체제나 아키텍쳐의 실행파일도 만들 수 있다.
만약 AMD64 계열 칩셋을 사용하는 리눅스 실행 파일을 만들 때는
GOOS=linux GOARCH=AMD64 go build 로 하면 된다.

기본적으로 패키지 임포트 할 때, src밑의 패키지부터 import를 해준다.
만약 C:/Go/src/TuckerGolang/에 있는 main.go에서
C:/Go/src/TuckerGolang/ch3_helloGoWorld의 child.go를 import하고 싶다면
src밑에서부터 "import TuckerGolang/ch3_helloGoWorld"를 해주면 된다.

임포트하는 패키지에 Alias(별칭)도 줄 수 있는데, 아래처럼 가능하다.
import(
    aliasName "TuckerGolang/ch3_helloGoWorld"
)

Go 소스는 package부터 선언을 해주어야 한다. 즉, 이 코드가 어떤 패키지에 속하는지를 규명해주는 것이다.
package main은 main 패키지에 속하는 코드라는 것을 의미한다.

!!main()함수가 없는 패키지는 main 패키지 이름을 쓸 수 없다.!!
!!따라서, ch3이나 ch2 패키지 내 파일들이 package main을 쓸 수 없음.!!

main()함수는 프로그램의 진입점 함수이며, 프로그램은 항상 main() 함수에서 시작된다.


** 3장 정리 **
1. Go 언어는 2009년 공개되어 지속적으로 발전하고 있다.
2. 모든 Go코드는 package 선언으로 시작한다.
3. 프로그램 시작을 포함한 패키지는 반드시 main() 함수가 있어야 한다. (main 함수가 없는 패키지는 main이라는 패키지 이름을 쓸 수 없다.)
4. fmt 패키지는 표준입출력 기능을 제공한다.
5. 모든 Go 프로그램은 main() 함수에서 시작하며 종료한다.

6. src밑 실행파일을 만들 패키지에 들어가서 go mod init을 하면 go 모듈이 만들어진다.
내 경우, src/TuckerGolang/main.go를 진입점으로 하는 실행파일을 만들기 위해
src/TuckerGolang 디렉토리에서 go mod init을 해 go.mod를 생성했고, 이 모듈 파일은
모듈명(디폴트는 go mod를 한 패키지 이름인 TuckerGolang)과 Go 버전, 그리고 이번에는 없지만 필요한 패키지 목록정보가 담겨있다.

그 다음, go build를 하면 그 운영체제/CPU아키텍쳐에 맞게 실행파일이 생성된다.
기본적으로 현재 위치의 패키지 이름과 동일한 이름의 실행파일이 생성된다.