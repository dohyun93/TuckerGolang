package ch28_test_benchmark

import (
	"fmt"
)

func Ch28_square() {
	fmt.Printf("30 * 30 = %d\n", Square(30))
	myString := "hello"
	addressMyString := &myString
	fmt.Println(myString, *addressMyString)
}

func Square(age int) int {
	return age * age
}

/*
TDD: 테스트 주도 개발.

테스트 주도 개발은 소스코드 개발 전 테스트부터 작성하는 개발 방법이다.

먼저 기능에 대한 작은 테스트를 작성한 뒤, 해당 테스트를 통과하는 기능을 개발한다.
개발한 기능이 테스트에 통과하지 못할경우 해당 기능을 solid 원칙에 의거하여 개선한다.
(이 과정이 리팩터링이다.)

그리고 테스트를 추가하여 더욱 많은 테스트케이스를 통과하는 촘촘한 소스코드를 개발한다.

TDD의 장점은
1. 테스트 코드가 촘촘해져 더욱 고가용성의 프로그램 개발을 가능하게 해준다는 것과,
2. 작은 목표설정 -> 실패 -> 달성 -> 달성 강화(개선) -> 새로운 작은 목표 설정
절차를 따르기 때문에, 개발 자체가 재밌어진다.

또한 테스트에는
1. 블랙박스 테스트: 실사용자 입장에서 주로 QA직군이 수행하는 테스트이다. 소스코드레벨의 분석이
이뤄진다기 보다는 개발한 프로그램을 실제 사용해보며 테스트를 한다.

2. 화이트박스 테스트: 소스코드 레벨에서 개발한 프로그램이 갖는 문제는 없는지 분석한다.
'유닛 테스트'라고도 부른다.

이 두 가지 테스트방법을 혼용해야 더 좋은 품질의 프로그램을 만들 수 있다.
블랙박스 테스트만 하면 제품 전체의 사용성만을 검증하게 되며 코드 내부 잠재되어있는 버그는 찾는데 어려움이 있을 수 있고,
화이트박스 테스트만 하면 코드를 직접 검사할 수 있지만 사용자 입장에서 전체 서비스를 검사하는데 어려움이 있을 수 있기 때문이다.

하하.
*/
