SOLID

좋은 객체지향 프로그램은 SOLID 원칙을 따른 프로그램 이다.
(모듈간)결합도가 낮고, (모듈내)응집도가 높아야 좋은 프로그램이다.

현대 소프트웨어는 다수의 사람들이 개발을 하고 각 모듈을 합치게 되었을 때 완성이 된다.
각자가 올바르게 설계하지 않으면 유지보수가 어려운 코드가 되기때문에 SOLID 원칙을 최대한 따르며 개발해야 좋은 코드가 된다.

좋은 설계를 살펴보기 앞서 나쁜 설계를 살펴보자.

<나쁜 설계의 특징>
1. 경직성 : 모듈간 결합도가 높아 코드 변경하기 어렵다.
2. 부서지기 쉬움 : 한 부분을 건드리면 다른 부분에서 망가지는 케이스. 결합도가 높을때 발생한다.
3. 부동성 : 개발된 코드를 타 프로젝트에서 사용하고자 하나, 모듈간 결합도가 너무 높아서 옮길 수 없는 특성. -> 재사용성이 낮아져 좋은코드가 아님.

좋은 설계는 위 <나쁜 설계> 가 없는 설계를 의미한다.
즉, 좋은설계란 -> '결합도가 낮고, 응집도가 높은 설계'이다.

즉 모듈간 독립성이 있기 때문에 소스의 수정이 타 부분에 사이드이펙을 주지 않으면서, 타 부분에 재사용할 수 있는 설계가 좋은 설계이다.

S: Single Responsibility Principle (단일 책임 원칙)
O: Open-Closed Principle (개방-폐쇄 원칙)
L: Liskov Substitution Principle (리스코프 치환 원칙)
I: Interface Segregation Principle (인터페이스 분리원칙)
D: Dependency Inversion Principle (의존 관계 역전 원칙)

